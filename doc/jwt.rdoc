= Documentation for JWT Feature

The jwt feature adds support for JSON API access for all other features
that ship with Rodauth, using JWT (JSON Web Tokens) to hold the
authentication data.

When this feature is used, all other features become accessible via a
JSON API.  The JSON API uses the POST method for all requests, using
the same parameter names as the features uses.  JSON API requests to
Rodauth endpoints that use a method other than POST will result in a
405 Method Not Allowed response.

Responses are returned as JSON hashes.  In case of an error, the "error"
entry is set to an error message, and the "field-error" entry is set to
an array containing the field name and the error message for that field.
Successful requests by default store a "success" entry with a success
message, though that can be disabled.

In order to use this feature, you have to set the +jwt_secret+ configuration
option the secret used to cryptographically protect the token.

To use this JSON API, when processing responses for requests to a Rodauth
endpoint, check for the Authorization header, and use the value of the
response Authorization header as the request Authorization header in
future requests, if the response Authorization header is set. If the
response Authorization header is not set, then continue to use the
previous Authorization header.

When using this feature, consider using the :json=>:only option when
loading the rodauth plugin, if you want Rodauth to only handle
JSON requests.  If you don't use the :json=>:only option, the jwt feature
will probably result in an error if a request to a Rodauth endpoint comes
in with a Content-Type that isn't application/json, unless you also set
<tt>only_json? false</tt> in your rodauth configuration.

== Auth Value Methods

invalid_jwt_format_error_message :: The error message to use when a JWT with an invalid format is submitted in the Authorization header.
json_accept_regexp :: The regexp to use to check the Accept header for JSON if jwt_check_accept? is true.
json_non_post_error_message :: The error message to use when a JSON non-POST request is sent.
json_not_accepted_error_message :: The error message to display if jwt_check_accept? is true and the Accept header is present but does not match json_request_content_type_regexp.
json_request_content_type_regexp :: The regexp to use to recognize a request as a json request.
json_response_content_type :: The content type to set for json responses, application/json by default.
json_response_error_key :: The JSON result key containing an error message, "error" by default.
json_response_error_status :: The HTTP status code to use for JSON error responses, 400 by default.
json_response_field_error_key :: The JSON result key containing an field error message, "field-error" by default.
json_response_success_key :: The JSON result key containing a success message for successful request, if set.  nil by default to not set success messages.
jwt_algorithm :: The JWT algorithm to use, "HS256" by default.
non_json_request_error_message :: The error message to use when a non-JSON request is sent and +only_json?+ is set.
only_json? :: Whether to have Rodauth only allow JSON requests.  True by default if :json=>:only option was given when loading the plugin.  If set, rodauth endpoints will issue an error for non-JSON requests.
jwt_authorization_ignore :: A regexp matched against the Authorization header, which skips JWT processing if it matches.  By default, HTTP Basic and Digest authentication are ignored.
jwt_authorization_remove :: A regexp to remove from the Authorization header before processing the JWT.  By default, a Bearer prefix is removed.
jwt_check_accept? :: Whether to check the Accept header to see if the client supports JSON responses, false by default for backwards compatibility.
jwt_secret :: The JWT secret to use.  Access to this should be protected the same as a session secret.

jwt_sub :: The JWT subject reserved claim.  Can be a proc that takes the Rodauth instance and returns a value.  By default, the session key.
jwt_verify_sub? :: Whether to verify the JWT subject on decode.  Can be a proc that takes the Rodauth instance and returns the comparison operand (or true to use the +jwt_sub+ method).  false by default.
jwt_jti :: The JWT ID reserved claim.  Can be a proc that takes the Rodauth instance and returns a value.  nil by default.
jwt_verify_jti? :: Whether to verify the JWT ID.  Must be a proc that takes the Rodauth instance and returns a proc that takes the JTI and returns true or false.  false by default.
jwt_iss :: The JWT issuer reserved claim.  Can be a proc that takes the Rodauth instance and returns a value.  nil by default.
jwt_verify_iss? :: Whether to verify the JWT issuer.  Can be a proc that takes the Rodauth instance and returns the comparison operand (or true to use the +jwt_iss+ method).  true by default (if +jwt_iss+ is truthy).
jwt_aud :: The JWT audience reserved claim.  Can be a proc that takes the Rodauth instance and returns a value.  nil by default.
jwt_verify_aud? :: Whether to verify the JWT audience.  Can be a proc that takes the Rodauth instance and returns the comparison operand (or true to use the +jwt_aud+ method).  true by default (if +jwt_aud+ is truthy).

jwt_iat :: The JWT issued at reserved claim.  Can be a proc that takes the Rodauth instance and returns a value.  By default, the current Unix epoch.
jwt_verify_iat? :: Whether to verify the JWT issued at on decode.  true by default (if +jwt_iat+ is truthy).
jwt_nbf :: The JWT not before time reserved claim. Can be a proc that takes the Rodauth instance and returns a value.  nil by default.
jwt_verify_nbf? :: Whether to verify the JWT not before time.  true by default (if +jwt_nbf+ is truthy).
jwt_exp :: The JWT expiration time reserved claim. Can be a proc that takes the Rodauth instance and returns a value.  nil by default.
jwt_verify_exp? :: Whether to verify the JWT expiration time.  true by default (if +jwt_exp+ if truthy).
jwt_leeway :: Leeway time, in seconds. Used when verifying the issued at (iat), expiration (exp), and not before time (nbf) reserved claims.  30 seconds by default.

use_jwt? :: Whether to use the JWT in the Authorization header for authentication information.  If false, falls back to using the rack session. By default, the Authorization header is used if it is present, if only_json? is true, or if the request uses a json content type.

== Auth Methods

json_request? :: Whether the current request is a JSON request, looks at the Content-Type request header by default.
jwt_token :: Retrieve the JWT token from the request, by default taking it from the Authorization header.
session_jwt :: An encoded JWT for the current session.
set_jwt_token(token) :: Set the JWT token in the response, by default storing it in the Authorization header.
